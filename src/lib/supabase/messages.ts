/**
 * Message Database Operations
 *
 * This module provides functions to interact with the messages table in Supabase.
 */

import { supabase } from '@/lib/supabase/client'
import type { MessageRaw } from '@/lib/supabase/types'
import { nanoid } from 'nanoid'

/**
 * Save a message to the database
 * @param data - Message data to save (id is autogenerated)
 */
export async function saveMessage(data: {
  conversationId: string
  role: 'USER' | 'ASSISTANT'
  content: string
  citations?: unknown[] | null
}): Promise<void> {
  try {
    const { error } = await supabase.from('messages').insert({
      conversationId: data.conversationId,
      role: data.role,
      content: data.content,
      citations: data.citations ? JSON.stringify(data.citations) : null,
    })

    if (error) {
      console.error('Error saving message:', error)
      throw new Error(`Failed to save message: ${error.message}`)
    }
  } catch (error) {
    console.error('Error in saveMessage:', error)
    throw error
  }
}

/**
 * Get all messages for a specific conversation
 * @param conversationId - The conversation ID
 * @returns Array of messages ordered by createdAt ASC
 */
export async function getMessagesByConversationId(
  conversationId: string
): Promise<MessageRaw[]> {
  try {
    const { data, error } = await supabase
      .from('messages')
      .select('*')
      .eq('conversationId', conversationId)
      .order('createdAt', { ascending: true })

    if (error) {
      console.error('Error fetching messages:', error)
      throw new Error(`Failed to fetch messages: ${error.message}`)
    }

    return data || []
  } catch (error) {
    console.error('Error in getMessagesByConversationId:', error)
    throw error
  }
}

/**
 * Update a conversation's updatedAt timestamp
 * This is called whenever a new message is saved to keep conversations sorted by most recent activity
 * @param conversationId - The conversation ID
 */
export async function updateConversationUpdatedAt(
  conversationId: string
): Promise<void> {
  try {
    const { error } = await supabase
      .from('conversations')
      .update({ updatedAt: new Date().toISOString() })
      .eq('id', conversationId)

    if (error) {
      console.error('Error updating conversation updatedAt:', error)
      throw new Error(`Failed to update conversation: ${error.message}`)
    }
  } catch (error) {
    console.error('Error in updateConversationUpdatedAt:', error)
    throw error
  }
}

